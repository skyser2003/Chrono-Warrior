CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
LIST( APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake" )
INCLUDE( pch_support )

SET(PROJECT_NAME "Chrono Warrior")
SET(SOURCE "source")

RUNTIME_LIBRARY_OPTION(Release /MT)
RUNTIME_LIBRARY_OPTION(Debug /MTd)

PROJECT (${PROJECT_NAME})


SET(CW_ROOT_DIR ${PROJECT_SOURCE_DIR})
SET(DX_ROOT_DIR ${PROJECT_SOURCE_DIR}/FG_DX_Engine)
SET(UI_ROOT_DIR ${PROJECT_SOURCE_DIR}/FG_UI_Engine)
SET(TE_ROOT_DIR ${PROJECT_SOURCE_DIR}/FG_Time_Engine)
SET(IL_ROOT_DIR ${PROJECT_SOURCE_DIR}/FG_Input_Library)
SET(WL_ROOT_DIR ${PROJECT_SOURCE_DIR}/FG_Window_Library)

IF(${CMAKE_EXE_LINKER_FLAGS} STREQUAL " /machine:x64 ")
	SET (ARCH "64")
ELSE()
	SET (ARCH "86")
ENDIF()

SET (CW_SOURCE_DIR "${CW_ROOT_DIR}/${SOURCE}")
SET (CW_PCH_SUBDIR ${CW_SOURCE_DIR}/stdafx)
SET (CW_PCH_NAME "stdafx")
SET (CW_PCH_HEADER ${CW_PCH_NAME}.h)
SET (CW_PCH_CPP ${CW_PCH_NAME}.cpp)
SET (CW_PCH_BIN ${CW_PCH_NAME}.pch)

SET(CW_SOURCE_SUBDIRS
"Extern"
"Extern\\\\tinyxml2"
"Game"
"Logic"
"Logic\\\\FieldObject"
"Logic\\\\FieldObject\\\\FieldObject"
"Logic\\\\FieldObject\\\\FieldUnit"
"Logic\\\\Map"
"Logic\\\\Position"
"Logic\\\\Projectile"
"Logic\\\\Tile"
"Main"
"Mode"
"Mode\\\\GameMode"
"Mode\\\\Mode"
"Mode\\\\StartMenuMode"
"stdafx"
)

SET(CW_SOURCE_FILES "")
FOREACH(subdir ${CW_SOURCE_SUBDIRS})
	FILE(GLOB TEMP ${CW_SOURCE_DIR}/${subdir}/*.cpp ${CW_SOURCE_DIR}/${subdir}/*.h)
	SET(CW_SOURCE_FILES ${CW_SOURCE_FILES} ${TEMP})
ENDFOREACH()

ADD_EXECUTABLE(${PROJECT_NAME}
${CW_SOURCE_FILES}
)

# Generate library projects
ADD_SUBDIRECTORY(FG_DX_Engine)
ADD_SUBDIRECTORY(FG_UI_Engine)
ADD_SUBDIRECTORY(FG_Time_Engine)
ADD_SUBDIRECTORY(FG_Input_Library)
ADD_SUBDIRECTORY(FG_Window_Library)

TARGET_LINK_LIBRARIES(${PROJECT_NAME}
DxCanvas
InputManager
TimeEngine
UIEngine
WindowLibrary
)

# Set include directories
INCLUDE_DIRECTORIES(${CW_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CW_PCH_SUBDIR})
INCLUDE_DIRECTORIES(${DX_ROOT_DIR}/${SOURCE})
INCLUDE_DIRECTORIES(${UI_ROOT_DIR}/${SOURCE})
INCLUDE_DIRECTORIES(${TE_ROOT_DIR}/${SOURCE})
INCLUDE_DIRECTORIES(${IL_ROOT_DIR}/${SOURCE})
INCLUDE_DIRECTORIES(${WL_ROOT_DIR}/${SOURCE})
INCLUDE_DIRECTORIES( "$ENV{DXSDK_DIR}Include" )

# Precompiled header
MSVC_SET_PCH(${PROJECT_NAME}
${CW_PCH_SUBDIR}/${CW_PCH_HEADER}
${CW_PCH_SUBDIR}/${CW_PCH_CPP}
)

# Set Visual Studio filter
FOREACH(subdir ${CW_SOURCE_SUBDIRS})
	FILE(GLOB subdir_files ${CW_SOURCE_DIR}/${subdir}/*.cpp ${CW_SOURCE_DIR}/${subdir}/*.h)
    SOURCE_GROUP(${subdir} FILES ${subdir_files})
ENDFOREACH()

# Link external libraries
SET(DIRECTX_LINK_DIRECTORY $ENV{DXSDK_DIR}Lib/x${ARCH}) 
LINK_DIRECTORIES(${DIRECTX_LINK_DIRECTORY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
"${DIRECTX_LINK_DIRECTORY}/d3dx10.lib"
"${DIRECTX_LINK_DIRECTORY}/d3dx11.lib"
"${DIRECTX_LINK_DIRECTORY}/d3d11.lib"
"${DIRECTX_LINK_DIRECTORY}/dsound.lib"
"${DIRECTX_LINK_DIRECTORY}/dxguid.lib"
"${DIRECTX_LINK_DIRECTORY}/dxgi.lib"
"winmm.lib"
)